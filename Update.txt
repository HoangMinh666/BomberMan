UI.H
#pragma once
#include <iostream>
#include <SFML/Graphics.hpp>
#include "Until.h"
#include <conio.h> 
#include <time.h>

#pragma comment (lib, "sfml-graphics-d.lib")
#pragma comment (lib, "sfml-audio-d.lib")
#pragma comment (lib, "sfml-network-d.lib")
#pragma comment (lib, "sfml-window-d.lib")
#pragma comment (lib, "sfml-system-d.lib")

using namespace std;
using namespace sf;

class UI
{
public:
	UI();
	~UI();

	sf::RenderWindow *window;
	Texture *t1, *t2, *t3, *t4, *t5;
	Sprite *spriteBackground;
	Sprite *spriteBomberMan;
	Sprite *spriteWall;
	Sprite *spriteBrick;
	Sprite *spriteMonster;
	char    StartUI();
private:

};


UI.CPP
#include "UI.h"
#include <SFML/Graphics.hpp>
#pragma comment (lib, "sfml-graphics-d.lib")
#pragma comment (lib, "sfml-audio-d.lib")
#pragma comment (lib, "sfml-network-d.lib")
#pragma comment (lib, "sfml-window-d.lib")
#pragma comment (lib, "sfml-system-d.lib")
using namespace sf;
UI::UI()
{
	window = new sf::RenderWindow(sf::VideoMode(MAX_WIDTH * sizeCell, MAX_HEIGHT * sizeCell), "SFML example");
	window->clear();

	t1 = new sf::Texture();
	t2 = new sf::Texture();
	t3 = new sf::Texture();
	t4 = new sf::Texture();
	t5 = new sf::Texture();
	
	
	t1->loadFromFile("D:/iimei/images.png");
	t2->loadFromFile("D:/iimei/wall2.png");
	t3->loadFromFile("D:/iimei/Brick.png");
	t4->loadFromFile("D:/iimei/Bomberman.png");
	t5->loadFromFile("D:/iimei/monster.png");


	spriteBackground = new Sprite(*t1);
	spriteWall = new Sprite(*t2);
	spriteBrick = new Sprite(*t3);
	spriteBomberMan = new Sprite(*t4);
	spriteMonster = new Sprite (*t5);
}
UI ::~UI() {}


UPDATE BOMBERMAN.CPP
void BomberMan::DisplayBomberManUI(sf::Sprite &spBomberMan, sf::RenderWindow &window)
{
	if ( _bomberMan.GetC() == 'X') 
	{
		spBomberMan.setPosition(_bomberMan.GetX()*sizeCell, _bomberMan.GetY()*sizeCell);
		window.draw(spBomberMan);
	}

}

UPDATE GAME.CPP
void GameBomberMan::OnePlayerMode(UI *ui)
{
	system("CLS");
	bomb1 = new Bomb;
	player1 = new BomberMan(1, 1, 'X');

	bool finish = false;

	while (ui->window->isOpen()) 
	{
		Event e;
		
		while (ui->window->pollEvent(e))
		{
			if (e.type == Event::Closed)
				ui->window->close();
		}
		map->DisplayMapUI(*ui->spriteBackground, *ui->spriteWall, *ui->spriteBrick, *ui->window); 
		player1->DisplayBomberManUI(*ui->spriteBomberMan, *ui->window);
	//	ui->window->display();

		GoToXY(0, MAX_HEIGHT);  cout << "Remaining lives: " << player1->_liveLeft;

		while (1)
		{
			if (_kbhit())
			{
				char ch = _getch();
				if (ch == 72 || ch == 80 || ch == 75 || ch == 77) player1->Move(map, ch, bomb1);
				else if (ch == ' ') player1->SetBomb(bomb1, map);
				else if (ch == 'p') _getch();
			}

			
			player1->GetPortal(map, bomb1, portal);
			if (!bomb1->_isExplosion)
			{
				if (bomb1->BombExplosion(map, portal, brick, &player1->_bomberMan, monster))
					player1->ResetBomberMan(bomb1);
			}
			if (player1->CollideMonster(monster))
			{
				player1->ResetBomberMan(bomb1); GoToXY(17, MAX_HEIGHT);
				cout << player1->_liveLeft;
			}

			monster->Move(map);
			if (brick->IsDestroyed() || !player1->_liveLeft || monster->IsDeadAll())
			{
				finish = true;
				break;
			}

			//update UI
			ui->window->clear();
			map->DisplayMapUI(*ui->spriteBackground, *ui->spriteWall, *ui->spriteBrick, *ui->window); 
			monster->DisplayMonsterUI(*ui->spriteMonster, *ui->window);
			player1->DisplayBomberManUI(*ui->spriteBomberMan, *ui->window);
			ui->window->display();
			//Sleep(100);
		}
			
	}
	system("CLS");
	if (brick->IsDestroyed() || monster->IsDeadAll()) cout << "CHUC MUNG BAN DA CHIEN THANG";
	else if (player1->_liveLeft == 0) cout << "GAME OVER";
}


UPDATE MAP2D.CPP
void Map2D::DisplayMapUI(sf::Sprite &spBackground, sf::Sprite &spWall, sf::Sprite &spBrick, sf::RenderWindow &window) {
	for (int y = 0; y < MAX_HEIGHT; y++)
		for (int x = 0; x < MAX_WIDTH; x++)
		{
			if (_map[y][x].GetC() == '#'||_map[y][x].GetC() == 'W')
			{
				spWall.setPosition(x*sizeCell, y*sizeCell);
				window.draw(spWall);
			}
			
			else if (_map[y][x].GetC() == 'B')
			{
				spBrick.setPosition(x*sizeCell, y*sizeCell);
				window.draw(spBrick);
			}
			else {
				spBackground.setPosition(x*sizeCell, y*sizeCell);
				window.draw(spBackground);
			}
		}
}


UPDATE MONSTER.CPP
void Monster::DisplayMonsterUI(sf::Sprite &spMonster, sf::RenderWindow &window)
{
	for (int i = 0; i < MAX_MONSTER; ++i)
	{
		if (!_checkDead[i])
		{
			if ( _monster[i].GetC() == '$') 
			{
				//window.clear();
				//_monster[i-1].Clear();
				spMonster.setPosition(_monster[i].GetX()*sizeCell, _monster[i].GetY()*sizeCell);
				window.draw(spMonster);
			}
		}
	}
}
